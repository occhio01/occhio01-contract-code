#
#  Panoramix v4 Oct 2019 
#  Decompiled source of 0xab85d25a50183FA56A5A98f644aA3a0EC9024bB9
# 
#  Let's make the world open source 
# 
#
#  I failed with these: 
#  - unknown543996f0(?)
#  - buy(uint256 _againCount)
#  All the rest is below.
#

def storage:
  owner is addr at storage 0
  devAddress is addr at storage 1
  stor2 is addr at storage 2
  name is array of uint256 at storage 3
  symbol is array of uint256 at storage 4
  decimals is uint8 at storage 5
  totalSupply is uint256 at storage 6
  unknown40f436d9Address is addr at storage 7
  unknowndc1d9051Address is addr at storage 8
  unknown95e30035Address is addr at storage 9
  totalBurn is uint256 at storage 10
  totalSale is uint256 at storage 11
  initTime is uint256 at storage 12
  unknown1b42df33 is uint256 at storage 13
  unknownf6c15f69 is uint256 at storage 14
  unknownace617f8 is uint256 at storage 15
  stor16 is uint256 at storage 16
  stor17 is uint256 at storage 17
  unknownede3e048 is uint256 at storage 18
  unknownd506d1fb is uint256 at storage 20
  unknownc4b57cde is uint256 at storage 21
  unknown26140132 is uint256 at storage 22
  balanceOf is mapping of uint256 at storage 23
  allowance is mapping of uint256 at storage 24
  unknownf9d33ec4 is mapping of struct at storage 25
  unknown96ba7b6f is array of struct at storage 26
  unknown87c3dff2 is mapping of uint256 at storage 27
  unknown1837cc3b is mapping of uint256 at storage 28
  unknown60cbf00a is mapping of uint256 at storage 29
  unknownc80270e3 is mapping of struct at storage 30
  unknowne64fbeb5 is uint256 at storage 31
  stor32 is uint8 at storage 32
  unknown0f96b16b is array of uint256 at storage 33
  unknown2a6c4bb5 is uint256 at storage 37
  unknown645cf903 is uint8 at storage 38
  unknown2eb23541 is uint256 at storage 39

def initTime(): # not payable
  return initTime

def name(): # not payable
  return name[0 len name.length]

def unknown0f96b16b(uint256 _param1): # not payable
  require calldata.size - 4 >= 32
  require _param1 < 4
  return unknown0f96b16b[_param1]

def totalSupply(): # not payable
  return totalSupply

def unknown1837cc3b(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >= 64
  return unknown1837cc3b[_param1][_param2]

def unknown1b42df33(): # not payable
  return unknown1b42df33

def unknown26140132(): # not payable
  return unknown26140132

def unknown2a6c4bb5(): # not payable
  return unknown2a6c4bb5

def unknown2eb23541(): # not payable
  return unknown2eb23541

def decimals(): # not payable
  return decimals

def totalBurn(): # not payable
  return totalBurn

def unknown40f436d9(): # not payable
  return unknown40f436d9Address

def unknown60cbf00a(uint256 _param1): # not payable
  require calldata.size - 4 >= 32
  return unknown60cbf00a[_param1]

def unknown645cf903(): # not payable
  return bool(unknown645cf903)

def balanceOf(address _owner): # not payable
  require calldata.size - 4 >= 32
  return balanceOf[_owner]

def unknown87c3dff2(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >= 64
  return unknown87c3dff2[_param1][_param2]

def owner(): # not payable
  return owner

def dev(): # not payable
  return devAddress

def symbol(): # not payable
  return symbol[0 len symbol.length]

def unknown95e30035(): # not payable
  return unknown95e30035Address

def unknown96ba7b6f(uint256 _param1): # not payable
  require calldata.size - 4 >= 32
  return unknown96ba7b6f[_param1].field_0, 
         unknown96ba7b6f[_param1].field_256,
         unknown96ba7b6f[_param1].field_512,
         unknown96ba7b6f[_param1].field_768,
         unknown96ba7b6f[_param1].field_1024,
         unknown96ba7b6f[_param1].field_1280,
         unknown96ba7b6f[_param1].field_1536,
         unknown96ba7b6f[_param1].field_1792,
         unknown96ba7b6f[_param1].field_2048,
         bool(uint8(unknown96ba7b6f[_param1].field_2816))

def unknownace617f8(): # not payable
  return unknownace617f8

def unknownc4b57cde(): # not payable
  return unknownc4b57cde

def unknownc80270e3(uint256 _param1): # not payable
  require calldata.size - 4 >= 32
  return addr(unknownc80270e3[_param1].field_0), 
         unknownc80270e3[_param1].field_256,
         unknownc80270e3[_param1].field_512,
         unknownc80270e3[_param1].field_768

def unknownd506d1fb(): # not payable
  return unknownd506d1fb

def unknowndc1d9051(): # not payable
  return unknowndc1d9051Address

def allowance(address _owner, address _spender): # not payable
  require calldata.size - 4 >= 64
  return allowance[_owner][_spender]

def unknowne64fbeb5(): # not payable
  return unknowne64fbeb5

def totalSale(): # not payable
  return totalSale

def unknownede3e048(): # not payable
  return unknownede3e048

def unknownf6c15f69(): # not payable
  return unknownf6c15f69

def unknownf9d33ec4(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >= 64
  return unknownf9d33ec4[_param1][_param2].field_256, 
         bool(uint8(unknownf9d33ec4[_param1][_param2].field_512)),
         bool(uint8(unknownf9d33ec4[_param1][_param2].field_520))

#
#  Regular functions
#

def _fallback() payable: # default function
  stop

def unknownff14302a(addr _param1): # not payable
  require calldata.size - 4 >= 32
  require caller == owner
  owner = _param1

def unknownde291f78(addr _param1): # not payable
  require calldata.size - 4 >= 32
  require caller == owner
  devAddress = _param1

def unknown711953ef(addr _param1): # not payable
  require calldata.size - 4 >= 32
  require caller == owner
  unknown40f436d9Address = _param1
  stor2 = _param1

def unknown65c39902(addr _param1, addr _param2): # not payable
  require calldata.size - 4 >= 64
  require caller == owner
  unknowndc1d9051Address = _param1
  unknown95e30035Address = _param2

def approve(address _spender, uint256 _value): # not payable
  require calldata.size - 4 >= 64
  allowance[caller][addr(_spender)] = _value
  log Approval(
        address owner=_value,
        address spender=caller,
        uint256 value=_spender)
  return 1

def unknown53b6a21a(uint256 _param1): # not payable
  require calldata.size - 4 >= 32
  require caller == owner
  if unknown40f436d9Address != 0:
      call unknown40f436d9Address with:
         value _param1 wei
           gas 2300 * is_zero(value) wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      log 0xbe5fdfc5: _param1, unknown40f436d9Address

def unknown54de08b0(bool _param1, uint256 _param2, uint256 _param3, uint256 _param4, uint256 _param5, uint256 _param6): # not payable
  require calldata.size - 4 >= 192
  require caller == devAddress
  stor32 = uint8(_param1)
  stor16 = _param2
  stor17 = _param3
  unknownf6c15f69 = _param4
  unknownace617f8 = _param5
  unknown1b42df33 = _param6

def unknown9514caae(): # not payable
  require calldata.size - 4 >= 128
  mem[96 len 128] = call.data[4 len 128]
  mem[224] = 0
  require caller == devAddress
  if call.data[4] + call.data[36] + call.data[68] + call.data[100] != 100:
      revert with 0, '100'
  s = 33
  idx = 96
  while 224 > idx:
      stor[s] = mem[idx]
      s = s + 1
      idx = idx + 32
      continue 
  idx = 37
  while 37 > idx:
      stor[idx] = 0
      idx = idx + 1
      continue 

def unknown1b611d8e(uint256 _param1, uint256 _param2, uint256 _param3, bool _param4, uint256 _param5): # not payable
  require calldata.size - 4 >= 160
  require caller == devAddress
  if _param2 > 0:
      if _param3 > 0:
          unknownc4b57cde = _param2 * 10^decimals
          unknown26140132 = _param3 * 10^decimals
          unknownd506d1fb = _param1 * 10^decimals
          unknown2a6c4bb5 = _param5
          unknown645cf903 = uint8(_param4)
          log 0x6c93bd37: _param1, _param2, _param3, _param4, _param5

def unknown9c13732f(addr _param1, uint256 _param2): # not payable
  require calldata.size - 4 >= 64
  require caller == owner
  require _param1
  require balanceOf[addr(this.address)] >= _param2
  require balanceOf[addr(_param1)] + _param2 > balanceOf[addr(_param1)]
  balanceOf[addr(this.address)] -= _param2
  balanceOf[addr(_param1)] += _param2
  log Transfer(
        address from=_param2,
        address to=this.address,
        uint256 value=_param1)
  require balanceOf[addr(this.address)] + balanceOf[addr(_param1)] + balanceOf[stor8] == balanceOf[addr(this.address)] + balanceOf[addr(_param1)] + balanceOf[stor8]

def unknowncdfdfe3f(addr _param1, addr _param2, uint256 _param3): # not payable
  require calldata.size - 4 >= 96
  if unknown40f436d9Address != caller:
      revert with 0, 'only game'
  require _param2
  require balanceOf[addr(_param1)] >= _param3
  require balanceOf[addr(_param2)] + _param3 > balanceOf[addr(_param2)]
  balanceOf[addr(_param1)] -= _param3
  balanceOf[addr(_param2)] += _param3
  log Transfer(
        address from=_param3,
        address to=_param1,
        uint256 value=_param2)
  require balanceOf[addr(_param1)] + balanceOf[addr(_param2)] + balanceOf[stor8] == balanceOf[addr(_param1)] + balanceOf[addr(_param2)] + balanceOf[stor8]

def getBuyPrice(): # not payable
  if unknown1b42df33 <= 0:
      if not unknown645cf903:
          return 775
      if unknown26140132:
          if unknownc4b57cde:
              if (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100:
                  return (10^10 / (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100)
  else:
      if not unknown645cf903:
          return unknown1b42df33
      if unknown1b42df33:
          if unknown26140132:
              if unknownc4b57cde:
                  if (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100:
                      return (10^10 / (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100)
  revert

def transferFrom(address _from, address _to, uint256 _value): # not payable
  require calldata.size - 4 >= 96
  require _value <= allowance[addr(_from)][caller]
  if _value > allowance[addr(_from)][caller]:
      revert with 0, 'SafeMath sub failed'
  allowance[addr(_from)][caller] -= _value
  require _to
  require balanceOf[addr(_from)] >= _value
  require balanceOf[addr(_to)] + _value > balanceOf[addr(_to)]
  balanceOf[addr(_from)] -= _value
  balanceOf[addr(_to)] += _value
  log Transfer(
        address from=_value,
        address to=_from,
        uint256 value=_to)
  require balanceOf[addr(_from)] + balanceOf[addr(_to)] + balanceOf[stor8] == balanceOf[addr(_from)] + balanceOf[addr(_to)] + balanceOf[stor8]
  return 1

def transfer(address _to, uint256 _value): # not payable
  require calldata.size - 4 >= 64
  require _to
  require balanceOf[caller] >= _value
  require balanceOf[addr(_to)] + _value > balanceOf[addr(_to)]
  balanceOf[caller] -= _value
  if _to == this.address:
      balanceOf[addr(_to)] += _value
      log Transfer(
            address from=_value,
            address to=caller,
            uint256 value=_to)
      log Transfer(
            address from=0,
            address to=caller,
            uint256 value=this.address)
      if balanceOf[caller] + balanceOf[addr(_to)] == balanceOf[caller] + balanceOf[addr(_to)]:
          stop
  else:
      balanceOf[addr(this.address)] += 2 * _value / 100
      balanceOf[addr(_to)] = balanceOf[addr(_to)] + _value - (2 * _value / 100)
      log Transfer(
            address from=(_value - (2 * _value / 100)),
            address to=caller,
            uint256 value=_to)
      log Transfer(
            address from=(2 * _value / 100),
            address to=caller,
            uint256 value=this.address)
      if balanceOf[caller] + balanceOf[addr(_to)] + (2 * _value / 100) == balanceOf[caller] + balanceOf[addr(_to)]:
          stop
  revert

def unknown0ed5d4f8(uint256 _param1): # not payable
  require calldata.size - 4 >= 32
  if unknown40f436d9Address != caller:
      revert with 0, 'only game'
  mem[0] = _param1
  mem[32] = 29
  idx = stor[sha3(mem[0 len 64])]
  s = 0
  t = 0
  while idx < unknownede3e048:
      mem[0] = idx
      mem[32] = sha3(_param1, 25)
      if uint8(unknownf9d33ec4[_param1][idx].field_520):
          idx = idx + 1
          s = s
          t = t
          continue 
      mem[0] = idx
      mem[32] = sha3(_param1, 25)
      Mask(248, 0, unknownf9d33ec4[_param1][idx].field_520) = 1
      if unknownf9d33ec4[_param1][idx].field_256 <= 0:
          if bool(uint8(unknownf9d33ec4[_param1][idx].field_512)) != 1:
              idx = idx + 1
              s = s
              t = t
              continue 
          idx = idx + 1
          s = s + unknown1837cc3b[idx][_param1]
          t = t
          continue 
      if bool(uint8(unknownf9d33ec4[_param1][idx].field_512)) != 1:
          idx = idx + 1
          s = s
          t = t + unknownf9d33ec4[_param1][idx].field_256
          continue 
      idx = idx + 1
      s = s + unknown1837cc3b[idx][_param1]
      t = t + unknownf9d33ec4[_param1][idx].field_256
      continue 
  unknown60cbf00a[_param1] = unknownede3e048 - 1
  return t, s

def unknown271292f5(addr _param1, uint256 _param2): # not payable
  require calldata.size - 4 >= 64
  if unknown40f436d9Address != caller:
      revert with 0, 'only game'
  require balanceOf[addr(_param1)] >= _param2
  balanceOf[addr(_param1)] -= _param2
  totalSupply -= _param2
  totalBurn += _param2
  if unknown1b42df33 <= 0:
      if unknown645cf903:
          require unknown26140132
          require unknownc4b57cde
          require (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100
          if unknown645cf903:
              unknownace617f8 += _param2
              if unknownf6c15f69 + unknownace617f8 >= unknownd506d1fb:
                  unknownf6c15f69 = 0
                  unknownace617f8 = 0
                  unknown1b42df33 = 10^10 / (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100
                  unknown2a6c4bb5++
                  if unknown2a6c4bb5 > 12:
                      unknown645cf903 = 0
  else:
      if unknown645cf903:
          require unknown1b42df33
          require unknown26140132
          require unknownc4b57cde
          require (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100
          if unknown645cf903:
              unknownace617f8 += _param2
              if unknownf6c15f69 + unknownace617f8 >= unknownd506d1fb:
                  unknownf6c15f69 = 0
                  unknownace617f8 = 0
                  unknown1b42df33 = 10^10 / (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100
                  unknown2a6c4bb5++
                  if unknown2a6c4bb5 > 12:
                      unknown645cf903 = 0
  log Burn(
        address burner=_param2,
        uint256 value=_param1)
  return 1

def burn(uint256 _value): # not payable
  require calldata.size - 4 >= 32
  require balanceOf[caller] >= _value
  if _value > balanceOf[caller]:
      revert with 0, 'SafeMath sub failed'
  balanceOf[caller] -= _value
  if _value > totalSupply:
      revert with 0, 'SafeMath sub failed'
  totalSupply -= _value
  if totalBurn + _value < totalBurn:
      revert with 0, 'SafeMath add failed'
  totalBurn += _value
  if unknown1b42df33 <= 0:
      if unknown645cf903:
          require unknown26140132
          require unknownc4b57cde
          require (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100
          if unknown645cf903:
              unknownace617f8 += _value
              if unknownf6c15f69 + unknownace617f8 >= unknownd506d1fb:
                  unknownf6c15f69 = 0
                  unknownace617f8 = 0
                  unknown1b42df33 = 10^10 / (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100
                  unknown2a6c4bb5++
                  if unknown2a6c4bb5 > 12:
                      unknown645cf903 = 0
  else:
      if unknown645cf903:
          require unknown1b42df33
          require unknown26140132
          require unknownc4b57cde
          require (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100
          if unknown645cf903:
              unknownace617f8 += _value
              if unknownf6c15f69 + unknownace617f8 >= unknownd506d1fb:
                  unknownf6c15f69 = 0
                  unknownace617f8 = 0
                  unknown1b42df33 = 10^10 / (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100
                  unknown2a6c4bb5++
                  if unknown2a6c4bb5 > 12:
                      unknown645cf903 = 0
  log Burn(
        address burner=_value,
        uint256 value=caller)
  return 1

def getInfo(uint256 _ninjaid): # not payable
  require calldata.size - 4 >= 32
  if unknown96ba7b6f[stor18].field_2304:
      idx = 896
      s = 0
      while (32 * unknown96ba7b6f[stor18].field_2304) + 864 > idx:
          mem[idx + 32] = unknown96ba7b6f[stor18][s + 9].field_256
          idx = idx + 32
          s = s + 1
          continue 
  if unknown96ba7b6f[stor18].field_2560:
      idx = (32 * unknown96ba7b6f[stor18].field_2304) + 928
      s = 0
      while (32 * unknown96ba7b6f[stor18].field_2304) + (32 * unknown96ba7b6f[stor18].field_2560) + 896 > idx:
          mem[idx + 32] = unknown96ba7b6f[stor18][s + 10].field_256
          idx = idx + 32
          s = s + 1
          continue 
  mem[0] = _ninjaid
  mem[32] = 29
  idx = stor[sha3(mem[0 len 64])]
  s = 0
  while idx < unknownede3e048:
      mem[0] = idx
      mem[32] = sha3(_ninjaid, 25)
      if unknownf9d33ec4[_ninjaid][idx].field_256 <= 0:
          if bool(uint8(unknownf9d33ec4[_ninjaid][idx].field_512)) != 1:
              idx = idx + 1
              s = s
              continue 
          mem[0] = idx
          mem[32] = sha3(_ninjaid, 25)
          if uint8(unknownf9d33ec4[_ninjaid][idx].field_520):
              idx = idx + 1
              s = s
              continue 
          mem[0] = _ninjaid
          mem[32] = sha3(idx, 28)
          idx = idx + 1
          s = s + unknown1837cc3b[idx][_ninjaid]
          continue 
      if uint8(unknownf9d33ec4[_ninjaid][idx].field_520):
          if bool(uint8(unknownf9d33ec4[_ninjaid][idx].field_512)) != 1:
              idx = idx + 1
              s = s
              continue 
          mem[0] = idx
          mem[32] = sha3(_ninjaid, 25)
          if uint8(unknownf9d33ec4[_ninjaid][idx].field_520):
              idx = idx + 1
              s = s
              continue 
          mem[0] = _ninjaid
          mem[32] = sha3(idx, 28)
          idx = idx + 1
          s = s + unknown1837cc3b[idx][_ninjaid]
          continue 
      if bool(uint8(unknownf9d33ec4[_ninjaid][idx].field_512)) != 1:
          idx = idx + 1
          s = s + unknownf9d33ec4[_ninjaid][idx].field_256
          continue 
      mem[0] = idx
      mem[32] = sha3(_ninjaid, 25)
      if uint8(unknownf9d33ec4[_ninjaid][idx].field_520):
          idx = idx + 1
          s = s + unknownf9d33ec4[_ninjaid][idx].field_256
          continue 
      mem[0] = _ninjaid
      mem[32] = sha3(idx, 28)
      idx = idx + 1
      s = s + unknownf9d33ec4[_ninjaid][idx].field_256 + unknown1837cc3b[idx][_ninjaid]
      continue 
  if unknown1b42df33 <= 0:
      if not unknown645cf903:
          if unknown2a6c4bb5 <= 12:
              return unknownede3e048, 
                     unknown96ba7b6f[stor18].field_1536,
                     s,
                     totalBurn,
                     totalSale,
                     775,
                     unknown2a6c4bb5,
                     unknownd506d1fb - unknownf6c15f69 - unknownace617f8,
                     stor16,
                     stor17
          return unknownede3e048, 
                 unknown96ba7b6f[stor18].field_1536,
                 s,
                 totalBurn,
                 totalSale,
                 775,
                 12,
                 unknownd506d1fb - unknownf6c15f69 - unknownace617f8,
                 stor16,
                 stor17
      require unknown26140132
      require unknownc4b57cde
      require (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100
      if unknown2a6c4bb5 <= 12:
          return unknownede3e048, 
                 unknown96ba7b6f[stor18].field_1536,
                 s,
                 totalBurn,
                 totalSale,
                 10^10 / (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100,
                 unknown2a6c4bb5,
                 unknownd506d1fb - unknownf6c15f69 - unknownace617f8,
                 stor16,
                 stor17
      return unknownede3e048, 
             unknown96ba7b6f[stor18].field_1536,
             s,
             totalBurn,
             totalSale,
             10^10 / (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100,
             12,
             unknownd506d1fb - unknownf6c15f69 - unknownace617f8,
             stor16,
             stor17
  if not unknown645cf903:
      if unknown2a6c4bb5 <= 12:
          return unknownede3e048, 
                 unknown96ba7b6f[stor18].field_1536,
                 s,
                 totalBurn,
                 totalSale,
                 unknown1b42df33,
                 unknown2a6c4bb5,
                 unknownd506d1fb - unknownf6c15f69 - unknownace617f8,
                 stor16,
                 stor17
      return unknownede3e048, 
             unknown96ba7b6f[stor18].field_1536,
             s,
             totalBurn,
             totalSale,
             unknown1b42df33,
             12,
             unknownd506d1fb - unknownf6c15f69 - unknownace617f8,
             stor16,
             stor17
  require unknown1b42df33
  require unknown26140132
  require unknownc4b57cde
  require (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100
  if unknown2a6c4bb5 <= 12:
      return unknownede3e048, 
             unknown96ba7b6f[stor18].field_1536,
             s,
             totalBurn,
             totalSale,
             10^10 / (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100,
             unknown2a6c4bb5,
             unknownd506d1fb - unknownf6c15f69 - unknownace617f8,
             stor16,
             stor17
  return unknownede3e048, 
         unknown96ba7b6f[stor18].field_1536,
         s,
         totalBurn,
         totalSale,
         10^10 / (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100,
         12,
         unknownd506d1fb - unknownf6c15f69 - unknownace617f8,
         stor16,
         stor17

def unknown29038e0c(addr _param1, uint256 _param2): # not payable
  require calldata.size - 4 >= 64
  if unknown40f436d9Address != caller:
      revert with 0, 'only game'
  else:
      if unknown1b42df33 <= 0:
          if not unknown645cf903:
              if _param2:
                  require _param2
                  if 2325 * _param2 / _param2 != 2325:
                      revert with 0, 'SafeMath mul failed'
                  else:
                      require this.address
                      require balanceOf[addr(_param1)] >= 2325 * _param2 / 10^12
                      require balanceOf[addr(this.address)] + (2325 * _param2 / 10^12) > balanceOf[addr(this.address)]
                      balanceOf[addr(_param1)] -= 2325 * _param2 / 10^12
                      balanceOf[addr(this.address)] += 2325 * _param2 / 10^12
                      log Transfer(
                            address from=(2325 * _param2 / 10^12),
                            address to=_param1,
                            uint256 value=this.address)
                      require balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8] == balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8]
                      stop
              else:
                  require this.address
                  require balanceOf[addr(_param1)] >= 0
                  require balanceOf[addr(this.address)] > balanceOf[addr(this.address)]
                  log Transfer(
                        address from=0,
                        address to=_param1,
                        uint256 value=this.address)
                  require balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8] == balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8]
                  stop
          else:
              require unknown26140132
              require unknownc4b57cde
              require (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100
              if _param2:
                  require _param2
                  if 3 * _param2 * 10^10 / (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100 / _param2 != 3 * 10^10 / (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100:
                      revert with 0, 'SafeMath mul failed'
                  else:
                      require this.address
                      require balanceOf[addr(_param1)] >= 3 * _param2 * 10^10 / (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100 / 10^12
                      require balanceOf[addr(this.address)] + (3 * _param2 * 10^10 / (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100 / 10^12) > balanceOf[addr(this.address)]
                      balanceOf[addr(_param1)] -= 3 * _param2 * 10^10 / (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100 / 10^12
                      balanceOf[addr(this.address)] += 3 * _param2 * 10^10 / (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100 / 10^12
                      log Transfer(
                            address from=(3 * _param2 * 10^10 / (12903225 * unknownf6c15f69 / unknownc4b57cde) + (12903225 * unknownace617f8 / unknown26140132) + 1290322500 / 100 / 10^12),
                            address to=_param1,
                            uint256 value=this.address)
                      require balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8] == balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8]
                      stop
              else:
                  require this.address
                  require balanceOf[addr(_param1)] >= 0
                  require balanceOf[addr(this.address)] > balanceOf[addr(this.address)]
                  log Transfer(
                        address from=0,
                        address to=_param1,
                        uint256 value=this.address)
                  require balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8] == balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8]
                  stop
      else:
          if not unknown645cf903:
              if _param2:
                  require _param2
                  if 3 * _param2 * unknown1b42df33 / _param2 != 3 * unknown1b42df33:
                      revert with 0, 'SafeMath mul failed'
                  else:
                      require this.address
                      require balanceOf[addr(_param1)] >= 3 * _param2 * unknown1b42df33 / 10^12
                      require balanceOf[addr(this.address)] + (3 * _param2 * unknown1b42df33 / 10^12) > balanceOf[addr(this.address)]
                      balanceOf[addr(_param1)] -= 3 * _param2 * unknown1b42df33 / 10^12
                      balanceOf[addr(this.address)] += 3 * _param2 * unknown1b42df33 / 10^12
                      log Transfer(
                            address from=(3 * _param2 * unknown1b42df33 / 10^12),
                            address to=_param1,
                            uint256 value=this.address)
                      require balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8] == balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8]
                      stop
              else:
                  require this.address
                  require balanceOf[addr(_param1)] >= 0
                  require balanceOf[addr(this.address)] > balanceOf[addr(this.address)]
                  log Transfer(
                        address from=0,
                        address to=_param1,
                        uint256 value=this.address)
                  require balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8] == balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8]
                  stop
          else:
              require unknown1b42df33
              require unknown26140132
              require unknownc4b57cde
              require (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100
              if _param2:
                  require _param2
                  if 3 * _param2 * 10^10 / (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100 / _param2 != 3 * 10^10 / (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100:
                      revert with 0, 'SafeMath mul failed'
                  else:
                      require this.address
                      require balanceOf[addr(_param1)] >= 3 * _param2 * 10^10 / (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100 / 10^12
                      require balanceOf[addr(this.address)] + (3 * _param2 * 10^10 / (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100 / 10^12) > balanceOf[addr(this.address)]
                      balanceOf[addr(_param1)] -= 3 * _param2 * 10^10 / (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100 / 10^12
                      balanceOf[addr(this.address)] += 3 * _param2 * 10^10 / (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100 / 10^12
                      log Transfer(
                            address from=(3 * _param2 * 10^10 / (100 * 10^10 / unknown1b42df33) + (unknownf6c15f69 / unknownc4b57cde * 10^10 / unknown1b42df33) + (unknownace617f8 / unknown26140132 * 10^10 / unknown1b42df33) / 100 / 10^12),
                            address to=_param1,
                            uint256 value=this.address)
                      require balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8] == balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8]
                      stop
              else:
                  require this.address
                  require balanceOf[addr(_param1)] >= 0
                  require balanceOf[addr(this.address)] > balanceOf[addr(this.address)]
                  log Transfer(
                        address from=0,
                        address to=_param1,
                        uint256 value=this.address)
                  require balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8] == balanceOf[addr(_param1)] + balanceOf[addr(this.address)] + balanceOf[stor8]
                  stop

def unknown90f28102(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >= 64
  if not unknown96ba7b6f[_param1].field_2304:
      if not unknown96ba7b6f[_param1].field_2560:
          if unknownf9d33ec4[_param2][_param1].field_0:
              mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504] = unknownf9d33ec4[_param2][_param1].field_0
              idx = (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504
              s = 0
              while (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1472 > idx:
                  mem[idx + 32] = unknownf9d33ec4[_param2][_param1][s].field_256
                  idx = idx + 32
                  s = s + 1
                  continue 
          mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1920 len floor32(unknown96ba7b6f[_param1].field_2560)] = mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024 len floor32(unknown96ba7b6f[_param1].field_2560)]
          mem[(64 * unknown96ba7b6f[_param1].field_2560) + (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1920] = unknownf9d33ec4[_param2][_param1].field_0
          mem[(64 * unknown96ba7b6f[_param1].field_2560) + (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1952 len floor32(unknownf9d33ec4[_param2][_param1].field_0)] = mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504 len floor32(unknownf9d33ec4[_param2][_param1].field_0)]
          return _param1, 
                 unknown96ba7b6f[_param1].field_1536,
                 bool(uint8(unknown96ba7b6f[_param1].field_2816)),
                 Mask(768, 0, unknown96ba7b6f[_param1].field_768),
                 384,
                 unknown96ba7b6f[_param1].field_1792,
                 (32 * unknown96ba7b6f[_param1].field_2560) + 416,
                 bool(uint8(unknownf9d33ec4[_param2][_param1].field_512)),
                 unknownf9d33ec4[_param2][_param1].field_256,
                 unknown1837cc3b[_param1][_param2],
                 unknown96ba7b6f[_param1].field_2560,
                 mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024 len floor32(unknown96ba7b6f[_param1].field_2560)],
                 mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + floor32(unknown96ba7b6f[_param1].field_2560) + 1920 len (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + -floor32(unknown96ba7b6f[_param1].field_2560) + 32]
      mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024] = unknown96ba7b6f[_param1][10].field_0
      idx = (32 * unknown96ba7b6f[_param1].field_2304) + 1024
      s = 0
      while (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 992 > idx:
          mem[idx + 32] = unknown96ba7b6f[_param1][s + 10].field_256
          idx = idx + 32
          s = s + 1
          continue 
      if not unknownf9d33ec4[_param2][_param1].field_0:
          mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1920 len floor32(unknown96ba7b6f[_param1].field_2560)] = mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024 len floor32(unknown96ba7b6f[_param1].field_2560)]
          mem[(64 * unknown96ba7b6f[_param1].field_2560) + (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1920] = unknownf9d33ec4[_param2][_param1].field_0
          mem[(64 * unknown96ba7b6f[_param1].field_2560) + (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1952 len floor32(unknownf9d33ec4[_param2][_param1].field_0)] = mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504 len floor32(unknownf9d33ec4[_param2][_param1].field_0)]
          return _param1, 
                 unknown96ba7b6f[_param1].field_1536,
                 bool(uint8(unknown96ba7b6f[_param1].field_2816)),
                 Mask(768, 0, unknown96ba7b6f[_param1].field_768),
                 384,
                 unknown96ba7b6f[_param1].field_1792,
                 (32 * unknown96ba7b6f[_param1].field_2560) + 416,
                 bool(uint8(unknownf9d33ec4[_param2][_param1].field_512)),
                 unknownf9d33ec4[_param2][_param1].field_256,
                 unknown1837cc3b[_param1][_param2],
                 unknown96ba7b6f[_param1].field_2560,
                 mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024 len floor32(unknown96ba7b6f[_param1].field_2560)],
                 mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + floor32(unknown96ba7b6f[_param1].field_2560) + 1920 len (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + -floor32(unknown96ba7b6f[_param1].field_2560) + 32]
      mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504] = unknownf9d33ec4[_param2][_param1].field_0
      idx = (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504
      s = 0
      while (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1472 > idx:
          mem[idx + 32] = unknownf9d33ec4[_param2][_param1][s].field_256
          idx = idx + 32
          s = s + 1
          continue 
      mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1920 len floor32(unknown96ba7b6f[_param1].field_2560)] = mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024 len floor32(unknown96ba7b6f[_param1].field_2560)]
      mem[(64 * unknown96ba7b6f[_param1].field_2560) + (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1952 len floor32(unknownf9d33ec4[_param2][_param1].field_0)] = mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504 len floor32(unknownf9d33ec4[_param2][_param1].field_0)]
      return _param1, 
             unknown96ba7b6f[_param1].field_1536,
             bool(uint8(unknown96ba7b6f[_param1].field_2816)),
             Mask(768, 0, unknown96ba7b6f[_param1].field_768),
             Array(len=mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + floor32(unknown96ba7b6f[_param1].field_2560) + 1920 len (32 * unknown96ba7b6f[_param1].field_2560) - floor32(unknown96ba7b6f[_param1].field_2560)], data=unknownf9d33ec4[_param2][_param1].field_0, mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504 len floor32(unknownf9d33ec4[_param2][_param1].field_0)], mem[(32 * unknown96ba7b6f[_param1].field_2304) + (64 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + floor32(unknownf9d33ec4[_param2][_param1].field_0) + 1952 len (32 * unknownf9d33ec4[_param2][_param1].field_0) - floor32(unknownf9d33ec4[_param2][_param1].field_0)]),
             unknown96ba7b6f[_param1].field_1792,
             (32 * unknown96ba7b6f[_param1].field_2560) + 416,
             bool(uint8(unknownf9d33ec4[_param2][_param1].field_512)),
             unknownf9d33ec4[_param2][_param1].field_256,
             unknown1837cc3b[_param1][_param2],
             unknown96ba7b6f[_param1].field_2560,
             mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024 len floor32(unknown96ba7b6f[_param1].field_2560)]
  idx = 992
  s = 0
  while (32 * unknown96ba7b6f[_param1].field_2304) + 960 > idx:
      mem[idx + 32] = unknown96ba7b6f[_param1][s + 9].field_256
      idx = idx + 32
      s = s + 1
      continue 
  if not unknown96ba7b6f[_param1].field_2560:
      if not unknownf9d33ec4[_param2][_param1].field_0:
          mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1920 len floor32(unknown96ba7b6f[_param1].field_2560)] = mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024 len floor32(unknown96ba7b6f[_param1].field_2560)]
          mem[(64 * unknown96ba7b6f[_param1].field_2560) + (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1920] = unknownf9d33ec4[_param2][_param1].field_0
          mem[(64 * unknown96ba7b6f[_param1].field_2560) + (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1952 len floor32(unknownf9d33ec4[_param2][_param1].field_0)] = mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504 len floor32(unknownf9d33ec4[_param2][_param1].field_0)]
          return _param1, 
                 unknown96ba7b6f[_param1].field_1536,
                 bool(uint8(unknown96ba7b6f[_param1].field_2816)),
                 Mask(768, 0, unknown96ba7b6f[_param1].field_768),
                 384,
                 unknown96ba7b6f[_param1].field_1792,
                 (32 * unknown96ba7b6f[_param1].field_2560) + 416,
                 bool(uint8(unknownf9d33ec4[_param2][_param1].field_512)),
                 unknownf9d33ec4[_param2][_param1].field_256,
                 unknown1837cc3b[_param1][_param2],
                 unknown96ba7b6f[_param1].field_2560,
                 mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024 len floor32(unknown96ba7b6f[_param1].field_2560)],
                 mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + floor32(unknown96ba7b6f[_param1].field_2560) + 1920 len (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + -floor32(unknown96ba7b6f[_param1].field_2560) + 32]
      mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504] = unknownf9d33ec4[_param2][_param1].field_0
      idx = (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504
      s = 0
      while (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1472 > idx:
          mem[idx + 32] = unknownf9d33ec4[_param2][_param1][s].field_256
          idx = idx + 32
          s = s + 1
          continue 
      mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1920 len floor32(unknown96ba7b6f[_param1].field_2560)] = mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024 len floor32(unknown96ba7b6f[_param1].field_2560)]
      mem[(64 * unknown96ba7b6f[_param1].field_2560) + (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1952 len floor32(unknownf9d33ec4[_param2][_param1].field_0)] = mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504 len floor32(unknownf9d33ec4[_param2][_param1].field_0)]
      return _param1, 
             unknown96ba7b6f[_param1].field_1536,
             bool(uint8(unknown96ba7b6f[_param1].field_2816)),
             Mask(768, 0, unknown96ba7b6f[_param1].field_768),
             Array(len=mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + floor32(unknown96ba7b6f[_param1].field_2560) + 1920 len (32 * unknown96ba7b6f[_param1].field_2560) - floor32(unknown96ba7b6f[_param1].field_2560)], data=unknownf9d33ec4[_param2][_param1].field_0, mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504 len floor32(unknownf9d33ec4[_param2][_param1].field_0)], mem[(32 * unknown96ba7b6f[_param1].field_2304) + (64 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + floor32(unknownf9d33ec4[_param2][_param1].field_0) + 1952 len (32 * unknownf9d33ec4[_param2][_param1].field_0) - floor32(unknownf9d33ec4[_param2][_param1].field_0)]),
             unknown96ba7b6f[_param1].field_1792,
             (32 * unknown96ba7b6f[_param1].field_2560) + 416,
             bool(uint8(unknownf9d33ec4[_param2][_param1].field_512)),
             unknownf9d33ec4[_param2][_param1].field_256,
             unknown1837cc3b[_param1][_param2],
             unknown96ba7b6f[_param1].field_2560,
             mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024 len floor32(unknown96ba7b6f[_param1].field_2560)]
  mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024] = unknown96ba7b6f[_param1][10].field_0
  idx = (32 * unknown96ba7b6f[_param1].field_2304) + 1024
  s = 0
  while (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 992 > idx:
      mem[idx + 32] = unknown96ba7b6f[_param1][s + 10].field_256
      idx = idx + 32
      s = s + 1
      continue 
  if not unknownf9d33ec4[_param2][_param1].field_0:
      mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1920 len floor32(unknown96ba7b6f[_param1].field_2560)] = mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024 len floor32(unknown96ba7b6f[_param1].field_2560)]
      mem[(64 * unknown96ba7b6f[_param1].field_2560) + (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1920] = unknownf9d33ec4[_param2][_param1].field_0
      mem[(64 * unknown96ba7b6f[_param1].field_2560) + (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1952 len floor32(unknownf9d33ec4[_param2][_param1].field_0)] = mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504 len floor32(unknownf9d33ec4[_param2][_param1].field_0)]
      return _param1, 
             unknown96ba7b6f[_param1].field_1536,
             bool(uint8(unknown96ba7b6f[_param1].field_2816)),
             Mask(768, 0, unknown96ba7b6f[_param1].field_768),
             384,
             unknown96ba7b6f[_param1].field_1792,
             (32 * unknown96ba7b6f[_param1].field_2560) + 416,
             bool(uint8(unknownf9d33ec4[_param2][_param1].field_512)),
             unknownf9d33ec4[_param2][_param1].field_256,
             unknown1837cc3b[_param1][_param2],
             unknown96ba7b6f[_param1].field_2560,
             mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024 len floor32(unknown96ba7b6f[_param1].field_2560)],
             mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + floor32(unknown96ba7b6f[_param1].field_2560) + 1920 len (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + -floor32(unknown96ba7b6f[_param1].field_2560) + 32]
  mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504] = unknownf9d33ec4[_param2][_param1].field_0
  idx = (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504
  s = 0
  while (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1472 > idx:
      mem[idx + 32] = unknownf9d33ec4[_param2][_param1][s].field_256
      idx = idx + 32
      s = s + 1
      continue 
  mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1920 len floor32(unknown96ba7b6f[_param1].field_2560)] = mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024 len floor32(unknown96ba7b6f[_param1].field_2560)]
  mem[(64 * unknown96ba7b6f[_param1].field_2560) + (32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + 1952 len floor32(unknownf9d33ec4[_param2][_param1].field_0)] = mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504 len floor32(unknownf9d33ec4[_param2][_param1].field_0)]
  return _param1, 
         unknown96ba7b6f[_param1].field_1536,
         bool(uint8(unknown96ba7b6f[_param1].field_2816)),
         unknown96ba7b6f[_param1].field_256,
         unknown96ba7b6f[_param1].field_512,
         unknown96ba7b6f[_param1].field_768,
         Array(len=unknown96ba7b6f[_param1].field_2560, data=mem[(32 * unknown96ba7b6f[_param1].field_2304) + 1024 len floor32(unknown96ba7b6f[_param1].field_2560)], mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + floor32(unknown96ba7b6f[_param1].field_2560) + 1920 len (32 * unknown96ba7b6f[_param1].field_2560) - floor32(unknown96ba7b6f[_param1].field_2560)], unknownf9d33ec4[_param2][_param1].field_0, mem[(32 * unknown96ba7b6f[_param1].field_2304) + (32 * unknown96ba7b6f[_param1].field_2560) + 1504 len floor32(unknownf9d33ec4[_param2][_param1].field_0)], mem[(32 * unknown96ba7b6f[_param1].field_2304) + (64 * unknown96ba7b6f[_param1].field_2560) + (32 * unknownf9d33ec4[_param2][_param1].field_0) + floor32(unknownf9d33ec4[_param2][_param1].field_0) + 1952 len (32 * unknownf9d33ec4[_param2][_param1].field_0) - floor32(unknownf9d33ec4[_param2][_param1].field_0)]),
         unknown96ba7b6f[_param1].field_1792,
         (32 * unknown96ba7b6f[_param1].field_2560) + 416,
         bool(uint8(unknownf9d33ec4[_param2][_param1].field_512)),
         unknownf9d33ec4[_param2][_param1].field_256,
         unknown1837cc3b[_param1][_param2]